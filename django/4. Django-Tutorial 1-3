# django-tutorial
```
django-tutorial/
	app/
		config/
	.gitignore
```

```python
> django-admin startproject config
> mv config app
# settings.py의 주석(프로젝트 명) 변경
```

### Clone 시 가상환경 설정

프로젝트를 구성할 때는
프로젝트의 소스파일뿐만아니라, 완벽하게 환경을 재현할 수 있어야한다.
`pip list`의 내용을 저장해놓아야한다.
`pip freeze` 명령을 이용해 파일로 기록한다.
`pip freeze > requirements.txt`

그 후 clone 후 새로운 가상환경을 만든다. 파이썬 버전은 기본적으로 `README.md`에 적혀있다.
그 후 `pip install -r requirements.txt` 를 이용하여 자동으로 같은 `pip`환경을 구성해준다.


### django 2.0
`urlpatterns`에서 더 쉬운 접근법을 사용하기 위해 정규표현식을 사용하지 않아도 된다.
```python
urlpatterns = [
	path('', views.polls)
	#path(r'^$', views.polls)
]
```

### URL 정의

`config/urls.py`
```python
from . import views

urlpatterns = [
	...
	# 다른 장고 앱에서 처리되게 할 수 있다.
	# polls/ 로 시작하는 URL은 polls.urls 모듈에서 처리되게 한다.
	path('polls/', include('polls.urls')),
	path('', views.index)
]
```

`polls/urls.py`
```python
urlpatterns = [
	path('', views.index, name='index'),
]
```

아무 어플리케이션에도 포함되지 않는 페이지를 처리하기 위해서 config에 `views.py`를 만들고 내용을 추가한다.
`127.0.0.1`을 입력하면 자동으로 `/polls/`로 전달되기 위해 `redirect`를 사용한다.

`polls/views.py`
```python
def index(request):
	redirect('index')
```

# Settings 설정

`settings.py`
```python
DATABASES = {
	'default' : {
		# 사용할 데이터베이스
		'ENGINE': 'django.db.backends.sqlite3'
		# 위치
		'NAME' : os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}

TIMEZONE = 'Asia/Seoul'
LANGUAGE_CODE = 'ko-kr'
```

# model 정의

`polls/models.py`에 `Question, Choice` 클래스 정의
모델을 정의하면 프로젝트에 알려야한다.
`settings.py`에 정의 `polls.apps.PollsConfig`

모델을 정의하면 이 모델에 대한 데이터베이스 스키마 생성이 가능하게 된다. 또한 이 객체에 접근하기 위한 Python 데이터베이스 접근 API를 생성시켜준다.

데이터베이스에 변경사실을 추가하기위해 `makemigrations`를 실행시킨다. 변경사실을 스키마로 관리하기위해 `migrate` 명령어를 쓴다.

### 시간에 관련된 함수
`timezone.now()` 현재 시간을 UTC 기준으로 나타냄
`datetime.timedelta(days=1)` 하루의 시간을 나타냄

```python
def was_published_recently(self):
    """
    자신의 게시일자 >= 지금 - 1

    :return: 최근에 게시되었는지 여부
    """
    return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
```

### 역방향 참조

** 역방향 조회 **
`Question.objects.get(pk=1).choice_set.all()`
Foreign 키로 참조되고 있는 choice를 찾기위해 다음과 같은 함수를 자동적으로 만들어준다. (역방향 참조)

** 역방향 생성 **
`Question.objects.get(pk=1).choice_set.create(choice_text='Not much')` 
다음과 같이 역방향 참조를 사용하여 생성할 수 있다.

기본적으로 모델은 Manager 객체가 생성되고, 데이터베이스 테이블 접근을 도와준다.
역방향참조는 같은 Manager 객체가 생성되지만 조금은 다른 RelatedManager 객체 안에 조건을 가지고 역방향 참조를 하게된다. (만약 q2(Questions.objects.get(pk=2)).choice_set일 경우 Choice.objects.filter(question=q2)와 같다.)

### 자동 조인
```python
current_year = timezone.now().year                                                                               

qs = Choice.objects.filter(question__pub_date__year=current_year)

print(qs.query)                                                                                                  
# SELECT "polls_choice"."id", 
# "polls_choice"."question_id", 
# "polls_choice"."choice_text", 
# "polls_choice"."votes" 
# FROM "polls_choice" 
# INNER JOIN "polls_question" 
# ON ("polls_choice"."question_id" = "polls_question"."id") 
# WHERE "polls_question"."pub_date" 
# BETWEEN 2017-12-31 15:00:00 
# AND 2018-12-31 14:59:59.999999

```
조인이 필요한 경우 자동으로 조인하여 데이터를 가져오게 된다.

# URL 정의

정규표현식을 사용하지 않고, 사용할 수 있게된 2.0 버전
`polls/urls.py`
```python
from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('<int:question_id>/', views.detail, name='detail'),
    path('<int:question_id>/results/', views.results, name='results'),
    path('<int:question_id>/vote/', views.vote, name='vote'),
]
```

# VIEW 사용
모든 `Django` 의 `VIEW`는 **response**를 반환하든 **예외**를 발생한다.

하드코딩된 페이지 디자인을 동적으로 바꾸기 위해 템플릿을 사용한다.

기본적으로 어플리케이션 폴더 밑 `templates/<app 이름>/<파일 명>` 이렇게 구성하면 자동으로 불러 올 수 있다.
Django의 기본설정파일은 `APP_DIRS` 옵션이 `True`로 설정된 `DjangoTemplates` 백엔드를 구성하고,  `DjangoTemplates`는 각 `INSTALLED_APPS` ==디렉토리의 "templates" 하위 디렉토리를 탐색한다.==

`polls/views.py`
```python
from django.http import HttpResponse
from django.template import loader

from .models import Question

def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('polls/index.html')
    context = {
        'latest_question_list': latest_question_list,
    }
    return HttpResponse(template.render(context, request))
```

template.render는 템플릿을 사용해서, 문자열을 만드는 일을 한다. 그러므로 `HttpResponse`로 리턴할 수 있다.

## Query Error

에러코드는 두가지가 있다.
`4xx` 요청오류 (사용자가 요청 오류)
`5xx` 서버오류 (서버가 처리하지 못하는 오류)

아래처럼 오류를 처리하지 않으면 500번대 오류가 발생하고, 아래처럼 예외를 처리했을 경우 400번대 에러코드를 보내준다.

`polls/views.py`
```python
try:
    question = Question.objects.get(pk=question_id)
# 해당 오브젝트를 가져오지 못할경우 Question 객체에서 오류가 발생한다.
except Question.DoesNotExist:
        raise Http404("Question does not exist")
return render(request, 'polls/detail.html', {'question': question})
```

### Shortcut

```python
question = get_object_or_404(Question, pk=question_id)
return render(request, 'polls/detail.html', {'question': question})
```

### get_object_or_404 동작방식
1. 클래스를 받아 안의 내용 `_default_manager`가 있는지 확인하고(`objects.all()`을 사용하기 위해 models.Model 클래스를 상속받는지 확인하고) 모든 객체를 가져온다.(`objects.all()`)
2. 현재 객체에 `.get()`을 실행해야하기때문에 속성이 있는지 `hasattr`로 확인한다.
3. `queryset.get(*args, **kwargs)`을 실행했을 때 `DoesNotExist`가 발생할 수 있으므로 예외를 처리한 후 리턴해준다


> Written with [StackEdit](https://stackedit.io/).
