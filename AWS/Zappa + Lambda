# AWS Lambda

zappa를 통해 Django를 배포해보자. IAM Credential만 잘 설정하면 참 쉽다..



## 람다란?

**Serverless**, 말 그대로 서버가 존재하지 않는다는 뜻이다. 실제로 작업을 처리하는 서버가 존재하지만 이를 신경쓰지 않아도 된다. 관리자가 서버의 사양, 확장성 등 모두 고려하지 않아도 **모든것을 자동으로 처리해준다.**



### Lambda, 장점

- 서버 확장성, 가용성에 대해 관리할 필요가 없다.
- 코드가 실행될때만 비용이 청구된다.



### Lambda, 단점

- 실행시간이 5분 이상 걸릴경우 자동으로 폐기되므로 오랜 시간을 요구하는 작업에는 적합하지 않는다.
- 초기 지연시간이 발생할 수 있다.



## Guide to using Django with Zappa

[원본](https://edgarroman.github.io/zappa-django-guide/)



### 순서

1. AWS Account Credentials
2. Environment Settings



### 1. AWS Account Credentials

사전작업으로는 다음이 필요하다.

- S3 Bucket 생성
  - region에 주의하여 생성하도록하자.
  - 이름은 `zappatest-code`라고 한다.
- IAM 유저 생성
  - 자세한 내용은 아래 섹션에서 설명한다.



#### 1-1. IAM 설정

1. https://console.aws.amazon.com/iam/home#/users 로 이동한다.
2. 사용자 추가
3. 사용자 이름 자유, 프로그래밍 방식 엑세스
4. 권한은 아무것도 설정하지 않는다.
5. 태그 설정도 없다.
6. 사용자 만들기를 완료한다.
7. `ACCESS_KEY`, `SECRET_ACCESS_KEY`를 **1-2** 항목을 참고해 채워넣는다.
8. 이후 다시 https://console.aws.amazon.com/iam/home#/users 로 이동한다.
9. 생성한 사용자를 클릭한다.
10. 인라인 정책 추가를 누른다. JSON 탭을 클릭한다.
11. 다음 내용에 꺾쇠부분을 채워넣어 붙여넣는다.

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "lambda:CreateFunction",
                "lambda:ListVersionsByFunction",
                "logs:DescribeLogStreams",
                "events:PutRule",
                "route53:GetHostedZone",
                "s3:CreateBucket",
                "iam:CreateRole",
                "lambda:GetFunctionConfiguration",
                "cloudformation:DescribeStackResource",
                "iam:AttachRolePolicy",
                "iam:PutRolePolicy",
                "apigateway:DELETE",
                "events:ListRuleNamesByTarget",
                "apigateway:PATCH",
                "cloudformation:UpdateStack",
                "events:ListRules",
                "lambda:DeleteFunction",
                "events:RemoveTargets",
                "logs:FilterLogEvents",
                "lambda:GetAlias",
                "apigateway:GET",
                "events:ListTargetsByRule",
                "cloudformation:ListStackResources",
                "iam:GetRole",
                "events:DescribeRule",
                "apigateway:PUT",
                "lambda:GetFunction",
                "route53:ListHostedZones",
                "lambda:UpdateFunctionConfiguration",
                "route53:ChangeResourceRecordSets",
                "cloudformation:DescribeStacks",
                "lambda:UpdateFunctionCode",
                "events:DeleteRule",
                "events:PutTargets",
                "lambda:AddPermission",
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "apigateway:POST",
                "lambda:RemovePermission",
                "lambda:GetPolicy"
            ],
            "Resource": "*"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "iam:PassRole",
                "s3:ListBucket"
            ],
            "Resource": [
                "arn:aws:s3:::<버킷이름, 여기서는 zappateset-code>",
                "arn:aws:iam::<사용자 ID, 모르겠으면 아래 참고>:role/*-ZappaLambdaExecutionRole"
            ]
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:ListBucketMultipartUploads",
                "s3:AbortMultipartUpload",
                "s3:DeleteObject",
                "s3:ListMultipartUploadParts"
            ],
            "Resource": "arn:aws:s3:::<버킷이름, 여기서는 zappateset-code>/*"
        }
    ]
}
```

​	사용자 ID는 https://console.aws.amazon.com/iam/home?region=ap-northeast-2#/home 에 접속했을 때 `IAM 사용자 로그인 링크: `의 링크에 12자리의 숫자이다. (`https://<사용자 ID>.signin.aws.amazon.com/console`)





#### 1-2. 로컬에 Credentials, Config 설정

`~/.aws/credentials`파일을 수정한다. 기존에 키가 있다면 뒤에 작성하면 된다.

레이벨의 이름은 자유롭게 설정하면 된다.

```shell
[zappa]
aws_access_key_id = your_access_key_id_specific_to_zappa
aws_secret_access_key = your_secret_access_key_specific_to_zappa
```

`~/.aws/config` 파일을 수정한다.

```shell
[default]
region = ap-northeast-2
output = json
```





### 2. Environment Settings



#### 2-1. Baseline packages

- Python 3.6 or 2.7 (AWS lambda의 지원 목록을 따른다.)
- 최신 장고
- 최신버전의 zappa
- zappa가 동작할 수 있는 가상환경
  - 여기에는 아래 두가지 방법 중 하나를 사용할 수 있다.



##### 2-1-1. Approach #1 - Local Machine

1. Python과 pip 및 virtualenv를 설치한다.
2. 프로젝트를 생성한다.

```shell
mkdir zappatest
cd zappatest
virtualenv ve
source ve/bin/activate
pip install django zappa
```



##### 2-1-2. Approach #2 - Docker with zappa (recommaned)

Docker사용이 동일한 환경을 팀의 다른 사람들과 공유하는것이 더 쉽기때문에 추천된다.

버전에 따라 아래 두개중 하나를 설치하면 된다.

- Python 2.7 ([lambci/lambda:build-python2.7](https://hub.docker.com/r/lambci/lambda/tags/))
- Python 3.6 ([lambci/lambda:build-python3.6](https://hub.docker.com/r/lambci/lambda/tags/))



###### Initial Setup

- [Install Docker](https://docs.docker.com/engine/installation/)
- zappa 이미지를 로컬에 설치

```shell
# For Python 2.7 projects
docker pull lambci/lambda:build-python2.7
# For Python 3.6 projects
docker pull lambci/lambda:build-python3.6
```



###### Project Setup

- 배포환경세팅을위한 Docker파일 생성

```dockerfile
FROM lambci/lambda:build-python3.6

LABEL maintainer="<your@email.com>"

WORKDIR /var/task

# Fancy prompt to remind you are in zappashell
RUN echo 'export PS1="\[\e[36m\]zappashell>\[\e[m\] "' >> /root/.bashrc

# Additional RUN commands here
# RUN yum clean all && \
#    yum -y install <stuff>

CMD ["bash"]
```

- Docker Build

```dockerfile
$ cd /your_zappa_project
$ docker build -t myzappa .
```



###### Create zappashell alias

빠른 Docker 실행을위해 명령어로 저장한다.

`AWS_PROFILE`은 credential에 Lambda 배포를 위해 작성한 레이벨 이름을 지정한다.

```shell
$ alias zappashell='docker run -ti -e AWS_PROFILE=zappa -v "$(pwd):/var/task" -v ~/.aws/:/root/.aws  --rm myzappa'
$ alias zappashell >> ~/.bash_profile
```

필자의 경우 Ubuntu + Zsh을 사용하기 때문에 조금 다르게 설정했다.

```shell
$ alias zappashell='sudo docker run -ti -e AWS_PROFILE=zappa -v "$(pwd):/var/task" -v ~/.aws/:/root/.aws  --rm myzappa'
$ alias zappashell | { read s; echo "alias ${s}" } >> ~/.zshrc

```



###### Create the Virtual Environment

가상환경에 필요한 라이브러리 설치

```python
$ zappashell
zappashell> python -m venv ve
zappashell> source ve/bin/activate 
(ve) zappa> pip install -r requirements.txt

```

가상환경의 현재 디렉터리는 로컬 시스템의 프로젝트에 매핑되어있다. `virtualenv`가 현재 폴더에 `ve` 폴더를 만들고 그 안에 Python 라이브러리들이 설치되어 컨테이너가 종료되어도 유지될 수 있지만 , 시스템라이브러리의 경우 컨테이너가 종료되면 손실된다. 해결책은 Dockerfile에 `RUN` 명령어를 사용하여 설치를 유지하는것이다.



###### Using your Environment

```shell
$ cd /your_zappa_project
$ zappashell
zappashell> source ve/bin/activate
(ve) zappashell> 

```

